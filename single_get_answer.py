import aiogram.utils.markdown as md
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Bot, Dispatcher, types
#import ujson 
#import sys
#sys.path.append('C:\\Users\\alik2\\Desktop\\Mine\\MasterMInd_bot')
from main import dp, bot, Is_liked, client, users, companies


# —Å–æ–∑–¥–∞—ë–º —Ñ–æ—Ä–º—É –∏ —É–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è
class Form(StatesGroup):
    name = State() 
    last_name = State()
    age = State() 
    gender = State()
    searching_gender = State() 
    key_words = State() 
    about_me = State() 
    location = State() 
    photo = State()

class Company_Form(StatesGroup):
    company_name = State() 
    age_to_in = State()  
    key_words = State() 
    about_company = State() 
    location = State() 
    photo = State()



# –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—à –¥–∏–∞–ª–æ–≥
@dp.message_handler()
async def start(message: types.Message):
    button1 = KeyboardButton('Single')
    button2 = KeyboardButton('Company')
    markup4 = ReplyKeyboardMarkup(resize_keyboard=True).row(
        button1, button2
    )
    if message.text.lower() in ['—Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É', '–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å']:
        await message.reply(f"–¢—ã —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é –ª—é–¥–µ–π –∏–ª–∏ –Ω–∞–π—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞?", reply_markup=markup4)
    elif message.text.lower() == 'single':
        if users.find({"user_id": str(message.chat.id)}):
            #–ø–æ—á–∏–Ω–∏—Ç—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ
            users.delete_one({"user_id": str(message.chat.id)})
        await Form.name.set()
        ReplyKeyboardRemove()
        await message.answer('–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
    elif message.text.lower() == 'company':
        if list(companies.find({"user_id": str(message.chat.id)})):
            companies.delete_one({"user_id": str(message.chat.id)})
            await Company_Form.company_name.set()
            ReplyKeyboardRemove()
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
            print('as')
        elif not list(users.find({"user_id": str(message.chat.id)})):
            print('asd')
            await message.reply(f"–û–±—å—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–¥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ single –∞–∫–∫–∞—É–Ω—Ç", reply_markup=markup4)
        else:
            await Company_Form.company_name.set()
            ReplyKeyboardRemove()
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')

    elif message.text == '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ MasterMind':
        await message.answer('''–í —Å–æ—Å—Ç–∞–≤–µ –º–∞—Å—Ç–µ—Ä–º–∞–π–Ω–¥-–≥—Ä—É–ø–ø—ã –æ–±—ã—á–Ω–æ –æ—Ç –¥–≤—É—Ö –¥–æ —à–µ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫. –ì—Ä—É–ø–ø–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä —Ä–∞–∑ –≤ –¥–≤–µ –Ω–µ–¥–µ–ª–∏. –ú–æ–∂–Ω–æ –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –ª–∏—á–Ω–æ –∏–ª–∏ —Å–æ–∑–≤–∞–Ω–∏–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Skype, Zoom –∏–ª–∏ –¥—Ä—É–≥—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É. –ü–ª—é—Å –ª–∏—á–Ω–æ–π –≤—Å—Ç—Ä–µ—á–∏ –≤ —Ç–æ–º, —á—Ç–æ –ø–æ –ø—É—Ç–∏ –Ω–∞ –Ω–µ–µ –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–¥—É–º–∞—Ç—å —Ç–æ, —á—Ç–æ —Ö–æ—á–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –æ–±—Å—É–∂–¥–∞—Ç—å, –∞ –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–º ‚Äî –ø–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å.

–ù–∞ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤—ã–¥–µ–ª—è–µ—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ 20 –º–∏–Ω—É—Ç), –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —á–µ–ª–æ–≤–µ–∫ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ —Å–≤–æ–µ–π –ø—Ä–æ–±–ª–µ–º–µ, –∏–¥–µ–µ –∏–ª–∏ –∑–∞–¥–∞—á–µ, –ø—Ä–æ—Å–∏—Ç —Å–æ–≤–µ—Ç–∞ –∏–ª–∏ –±–µ—Ä–µ—Ç –Ω–∞ —Å–µ–±—è –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —á—Ç–æ-–Ω–∏–±—É–¥—å —Å–¥–µ–ª–∞—Ç—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –≤—Å—Ç—Ä–µ—á–∏. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –º–∏–Ω—É—Ç) –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–∞—é—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —Å–ø–∏–∫–µ—Ä—É –≤ —Ç–æ–π —Ñ–æ—Ä–º–µ, –≤ –∫–æ—Ç–æ—Ä–æ–π –µ–º—É –∏ –∏–º —ç—Ç–æ —É–¥–æ–±–Ω–æ

–í–ê–ñ–ù–û –û–¢–ú–ï–¢–ò–¢–¨:
–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –∫–∞–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –µ–¥–∏–Ω–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤
–ï—Å–ª–∏ –≤—ã –ø–µ–≤–µ—Ü, –∏ –∏—â–∏—Ç–µ –≥–∏—Ç–∞—Ä–∏—Å—Ç–∞, –∞ –º–æ–∂–µ—Ç –∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–±—Ä–∞—Ç—å —Ü–µ–ª—É—é –≥—Ä—É–ø–ø—É, –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã —Ä–µ–∂–∏—Å—Å–µ—Ä, –∏—â–∏—Ç–µ –∞–∫—Ç—ë—Ä–æ–≤, –∞ –º–æ–∂–µ—Ç –∏ —Ç–∞–Ω—Ü–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –¥–ª—è —Å–µ–±—è –∫–æ–º–∞–Ω–¥—É.
–í—Å–µ —ç—Ç–æ –º–æ–∂–µ—Ç–µ —Ä–µ—à–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –ë–æ—Ç–∞....''')





# –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª –∑–∞–ø–æ–ª–Ω—è—Ç—å
@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.finish()
    await message.reply('–û–∫')


@dp.message_handler(state=Company_Form.company_name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['company_name'] = message.text

    await Company_Form.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Å—Ä –∑–Ω–∞—á)")

@dp.message_handler(lambda message: not message.text.isdigit(), state=Company_Form.age_to_in)
async def process_age_invalid(message: types.Message):
    return await message.reply("–ù–∞–ø–∏—à–∏ –∫–æ—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /cancel")

@dp.message_handler(lambda message: message.text.isdigit(), state=Company_Form.age_to_in)
async def process_age(message: types.Message, state: FSMContext):
    await Company_Form.next()
    await state.update_data(age_to_in=int(message.text))

    await message.reply("–Ω–∞–ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≤–∞—à–∞ –∫–æ–º–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")


@dp.message_handler(state=Company_Form.key_words)
async def process_key_words(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['key_words'] = message.text
        await Company_Form.next()
        await message.reply("–†–∞—Å—Å–∫–∞–∂–∏ –¥–ª—è —á–µ–≥–æ –∫–æ–º–ø–∞–Ω–∏—è")

@dp.message_handler(state=Company_Form.about_company)
async def process_about_me(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['about_company'] = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        markup.add(KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é üó∫Ô∏è', request_location=True))
        await Company_Form.next()
        await message.reply("–°–∫–∏–Ω—å —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–µ–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥", reply_markup=markup)


@dp.message_handler(content_types=['location', 'text'], state=Company_Form.location)
async def process_location(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text != None:
            data['location'] = message.text
        else:
            lat = message.location.latitude
            lon = message.location.longitude
            data['location'] = f"{lat}, {lon}"

        markup = types.ReplyKeyboardRemove()
        await Company_Form.next()
        await message.reply("–°–∫–∏–Ω—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", reply_markup=markup)


@dp.message_handler(content_types=["photo"], state=Company_Form.photo)
async def get_photo(message: types.Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    button1 = KeyboardButton('–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
    button2 = KeyboardButton("–ü–æ–∏—Å–∫")
    button3 = KeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
    button4 = KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    markup = ReplyKeyboardMarkup(resize_keyboard=True).row(
            button1, button2, button3, button4
        )
    async with state.proxy() as data:
        info = {
                "user_id": str(message.chat.id),
                "company_name": data['company_name'],
                "age": str(data['age_to_in']),
                "key_words": data['key_words'],
                "about_me": data["about_company"],
                "location": data["location"],
                "photo": file_id,
                "is_active": True,
                "recieved_from": []
            }
       
    companies.insert_one(info)

    await bot.send_message(
        message.chat.id,
        '–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞', 
        parse_mode=ParseMode.MARKDOWN,
        reply_markup= markup 
    )

    await state.finish()




#################
#single
#################




# –°—é–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç —Å –∏–º–µ–Ω–µ–º
@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

    ReplyKeyboardRemove()
    await Form.next()
    await message.reply("–§–∞–º–∏–ª–∏—è")

@dp.message_handler(state=Form.last_name)
async def process_last_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['last_name'] = message.text

    await Form.next()
    await message.reply("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
@dp.message_handler(lambda message: not message.text.isdigit(), state=Form.age)
async def process_age_invalid(message: types.Message):
    return await message.reply("–ù–∞–ø–∏—à–∏ –≤–æ–∑—Ä–∞—Å—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /cancel")

# –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∏ —É–∑–Ω–∞—ë–º –ø–æ–ª
@dp.message_handler(lambda message: message.text.isdigit(), state=Form.age)
async def process_age(message: types.Message, state: FSMContext):
    await Form.next()
    await state.update_data(age=int(message.text))

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add("–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞")

    await message.reply("–£–∫–∞–∂–∏ –ø–æ–ª (–∫–Ω–æ–ø–∫–æ–π)", reply_markup=markup)


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª
@dp.message_handler(lambda message: message.text not in ["–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞"], state=Form.gender)
async def process_gender_invalid(message: types.Message):
    return await message.reply("–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –ø–æ–ª. –£–∫–∞–∂–∏ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")



@dp.message_handler(state=Form.gender)
async def process_gender(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['gender'] = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        markup.add("–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞", "–í—Å–µ —Ä–∞–≤–Ω–æ")
        
        await Form.next()
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ –∏—Å–∫–∞—Ç—å", reply_markup=markup)

@dp.message_handler(lambda message: message.text not in ["–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞", "–í—Å–µ —Ä–∞–≤–Ω–æ"], state=Form.gender)
async def process_searching_gender_invalid(message: types.Message):
    return await message.reply("–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –ø–æ–ª. –£–∫–∞–∂–∏ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")

@dp.message_handler(state=Form.searching_gender)
async def process_searching_gender(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['searching_gender'] = message.text
        markup = types.ReplyKeyboardRemove()
        await Form.next()
        await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é", reply_markup=markup)


@dp.message_handler(state=Form.key_words)
async def process_key_words(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['key_words'] = message.text
        await Form.next()
        await message.reply("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ")

@dp.message_handler(state=Form.about_me)
async def process_about_me(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['about_me'] = message.text
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        markup.add(KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é üó∫Ô∏è', request_location=True))
        await Form.next()
        await message.reply("–°–∫–∏–Ω—å —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–µ–∂–µ–Ω–∏–µ", reply_markup=markup)


@dp.message_handler(content_types=['location', 'text'], state=Form.location)
async def process_location(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text != None:
            data['location'] = message.text
        else:
            lat = message.location.latitude
            lon = message.location.longitude
            data['location'] = f"{lat}, {lon}"

        markup = types.ReplyKeyboardRemove()
        await Form.next()
        await message.reply("–°–∫–∏–Ω—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", reply_markup=markup)


@dp.message_handler(content_types=["photo"], state=Form.photo)
async def get_photo(message: types.Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    async with state.proxy() as data:
        info = {
                "user_id": str(message.chat.id),
                "name": data['name'],
                "last_name": data['last_name'],
                "age": str(data['age']),
                "gender": data['gender'],
                "search_gender": data["searching_gender"],
                "key_words": data['key_words'],
                "about_me": data["about_me"],
                "location": data["location"],
                "photo": file_id,
                "right_now": True,
                "is_active": True,
                "recieved_from": [],
                "send_to": [],
                "companies": [] 
            }

    users.insert_one(info)
    button1 = KeyboardButton('–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
    button2 = KeyboardButton("–ü–æ–∏—Å–∫")
    button3 = KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É")
    button3 = KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    markup = ReplyKeyboardMarkup(resize_keyboard=True).row(
            button1, button2, button3
        )

    await bot.send_message(
        message.chat.id,
        '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–∞ –≤–∞—à single –ø—Ä–æ—Ñ–∏–ª—å, –º–æ–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö', 
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=markup
    )

    await state.finish()
    
